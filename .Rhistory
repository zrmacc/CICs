c(0, 2),
c(0, 0)
)
B %*% t(B)
t(B) %*% e(1, 0, 0)
t(B) %*% c(1, 0, 0)
B = rbind(
c(1, 0),
c(0, 1),
c(0, 0)
)
t(B) %*% B
B %*% t(B)
x = -log(0.73)
y = -log(0.54)
2 * (x - y) / (x + y)
2 * abs(log(0.73) - log(0.54))/(log(0.73)+log(0.54))
2 * abs(log(0.73) - log(0.54))/abs(log(0.73)+log(0.54))
1079 / 9235 * 100
1409 / 9308
devtools::install_github(repo = "zrmacc/RareEventsMeta/RareEventsMeta")
library(RareEventsMeta)
library(RareEventsMeta)
set.seed(2013)
data <- GenData(
total_studies = 10,
n1 = 100,
n2 = 100,
alpha2 = 10,
beta2 = 10
)
# Note: use more high `reps` and smaller `step_size` for more accurate results.
ExactConfInt(
size_1 = data$size_1,
events_1 = data$events_1,
size_2 = data$size_2,
events_2 = data$events_2,
reps = 50,
step_size = 0.02
)
alpha = 8.5
beta = 8.5
num_nu_vals = 15
# Alpha, beta pairs corresponding to nu search sequence.
# These do no change across simulation replicates.
ab_vals <- NuSeq(
alpha = alpha,
beta = beta,
num_nu_vals = num_nu_vals
)
NuSeq <- function(alpha, beta, num_nu_vals) {
mu <- alpha / (alpha + beta)
boundary_nu <- min(mu^2 * (1 - mu) / (1 + mu), mu * (1 - mu)^2 / (2 - mu))
nu_vals <- seq(
from = boundary_nu / 1e3, # Formerly 1e-6.
to = boundary_nu,
length.out = num_nu_vals
)
ab_vals <- lapply(nu_vals, function(nu) {return(BoundaryAB(mu, nu))})
ab_vals <- data.frame(do.call(rbind, ab_vals))
return(ab_vals)
}
# Alpha, beta pairs corresponding to nu search sequence.
# These do no change across simulation replicates.
ab_vals <- NuSeq(
alpha = alpha,
beta = beta,
num_nu_vals = num_nu_vals
)
ab_vals
dist <- function(x1, x2) {
return(sqrt(sum((x1 - x2)^2)))
}
dist(c(1,2), c(3,4))
dist(c(1,2), c(5,6))
phi1 <- c(1, 0, 1, 0, 0, 0)
w0 <- rep(0, 6)
eta <- 0.01.
w0 <- rep(0, 6)
phi1 <- c(1, 0, 1, 0, 0, 0)
eta <- 0.01
w0 <- rep(0, 6)
phi1 <- c(1, 0, 1, 0, 0, 0)
y1 <- -1
# First update.
w1 <- w0 - eta * phi1 * y1
w1
# Second indicator.
phi2 <- c(0, 1, 0, 1, 0, 0)
y2 <- 1
1 - as.numeric(t(w1) %*% phi2) * y2
eta <- 0.01
w0 <- rep(0, 6)
phi1 <- c(1, 0, 1, 0, 0, 0)
y1 <- -1
# First update.
w1 <- w0 - eta * phi1 * y1
# Second indicator.
phi2 <- c(0, 1, 0, 1, 0, 0)
y2 <- 1
1 - as.numeric(t(w1) %*% phi2) * y2
w1
# Second update.
w2 <- w1 - eta * phi2 * y2
w2
# Second indicator.
1 - as.numeric(t(w1) %*% phi2) * y2
# Second indicator.
1 - as.numeric(t(w1) %*% phi2) * y2 >= 0
# First indicator.
1 - as.numeric(t(w0) %*% phi1) * y1 >= 0
# Learning rate.
eta <- 0.01
# Initialization.
w0 <- rep(0, 6)
# Data 1.
phi1 <- c(1, 0, 1, 0, 0, 0)
y1 <- -1
# First indicator.
1 - as.numeric(t(w0) %*% phi1) * y1 >= 0
# First update.
w1 <- w0 - eta * phi1 * y1
# Data 2.
phi2 <- c(0, 1, 0, 1, 0, 0)
y2 <- 1
# Second indicator.
1 - as.numeric(t(w1) %*% phi2) * y2 >= 0
# Second update.
w2 <- w1 - eta * phi2 * y2
#
# Data 3.
phi3 <- c(0, 1, 0, 0, 1, 0)
y3 <- -1
# Third indicator
1 - as.numeric(t(ww) %*% phi3) * y3 >= 0
# Third indicator
1 - as.numeric(t(w2) %*% phi3) * y3 >= 0
1 - as.numeric(t(w2) %*% phi3) * y3
# Learning rate.
eta <- 0.1
# Initialization.
w0 <- rep(0, 6)
# Data 1.
phi1 <- c(1, 0, 1, 0, 0, 0)
y1 <- -1
# First indicator.
1 - as.numeric(t(w0) %*% phi1) * y1 >= 0
# First update.
w1 <- w0 - eta * phi1 * y1
# Data 2.
phi2 <- c(0, 1, 0, 1, 0, 0)
y2 <- 1
# Second indicator.
1 - as.numeric(t(w1) %*% phi2) * y2 >= 0
# Second update.
w2 <- w1 - eta * phi2 * y2
# Data 3.
phi3 <- c(0, 1, 0, 0, 1, 0)
y3 <- -1
# Third indicator
1 - as.numeric(t(w2) %*% phi3) * y3 >= 0
w1
# Learning rate.
eta <- 0.1
# Initialization.
w0 <- rep(0, 6)
# Data 1.
phi1 <- c(1, 0, 1, 0, 0, 0)
y1 <- -1
# First indicator.
1 - as.numeric(t(w0) %*% phi1) * y1 >= 0
# First update.
w1 <- w0 - eta * phi1 * y1
# Data 2.
phi2 <- c(0, 1, 0, 1, 0, 0)
y2 <- 1
# Second indicator.
1 - as.numeric(t(w1) %*% phi2) * y2 >= 0
# Second update.
w2 <- w1 - eta * phi2 * y2
# Data 3.
phi3 <- c(0, 1, 0, 0, 1, 0)
y3 <- -1
# Third indicator
1 - as.numeric(t(w2) %*% phi3) * y3 >= 0
1 - as.numeric(t(w2) %*% phi3) * y3
# Third update.
w3 <- w2 - eta * phi3 * y3
w3
# Data 4.
phi4 <- c(1, 0, 0, 0, 0, 1)
y4 <- 1
1 - as.numeric(t(w3) %*% phi4) * y4 >= 0
1 - as.numeric(t(w3) %*% phi4) * y4
# Final weight.
w4 <- w3 - eta * phi4 * y4
show(w4)
dist(x = (6, 1))
dist(x = c(6, 1))
dist(x = c(6, 1), method = "manhattan")
12 + 12 + 6 + 12 + 6
0.8 * 10 + 0.2 * (-5)
0.7 * 10 + 0.3 * (-5)
0.8 * (-5) + 0.2 * (50)
0.7 * (-5) + 0.3 * (50)
## Iteration t == 2
0.8 * 10 + 0.2 * (-5 -5)
0.7 * 10 + 0.3 * (-5 -5)
0.7 * (-5) + 0.3 * (50)
0.8 * (-5 + 7) + 0.2 * (-5 + 11.5)
0.7 * (-5 + 7) + 0.3 * (-5 + 11.5)
0.8 * (-5 - 5) + 0.2 * (50)
0.7 * (-5 - 5) + 0.3 * (50)
# Transition matrix.
t1 <- rbind(
c(1, 0, 0, 0, 0),
c(0.8, 0, 0.2, 0, 0),
c(0, 0.8, 0, 0.2, 0),
c(0, 0, 0.8, 0, 0.2),
c(0, 0, 0, 0, 1)
)
t1
t2 <- rbind(
c(1, 0, 0, 0, 0),
c(0.7, 0, 0.3, 0, 0),
c(0, 0.7, 0, 0.3, 0),
c(0, 0, 0.7, 0, 0.3),
c(0, 0, 0, 0, 1)
)
t2
t1
t2
# Transition matrix.
t1 <- rbind(
c(1, 0, 0, 0, 0),
c(0.8, 0, 0.2, 0, 0),
c(0, 0.8, 0, 0.2, 0),
c(0, 0, 0.8, 0, 0.2),
c(0, 0, 0, 0, 1)
)
t2 <- rbind(
c(1, 0, 0, 0, 0),
c(0.7, 0, 0.3, 0, 0),
c(0, 0.7, 0, 0.3, 0),
c(0, 0, 0.7, 0, 0.3),
c(0, 0, 0, 0, 1)
)
# Reward matrix.
r <- c(10, -5, -5, -5, 50)
for(t in 0:2){
t
}
for(t in 0:2){
show(t)
}
# Initialize v.
vstar <- rep(0, 5)
vstar
# Initialize v.
vstar <- rep(0, 6)
# Initialize v.
vstar <- rep(0, 5)
s
s = -1
if (a == 1) {
trans <- t1[s, ]
}
a = 1
if (a == 1) {
trans <- t1[s, ]
}
trans
t1
s
s = 2
s
trans <- t1[s, ]
trans
if (a == 1) {
trans <- t1[s, ]
} else {
trans <- t2[s, ]
}
trans
s
trans[i]
i=1
trans[i]
r
summands <- sapply(seq_len(5), function(i) {
trans[i] * (r[i] + vstar[i])
})
summands
# Calculate Qstar
Qstar <- function(s, a, vstar) {
if (a == 1) {
trans <- t1[s, ]
} else {
trans <- t2[s, ]
}
summands <- sapply(seq_len(5), function(i) {
trans[i] * (r[i] + vstar[i])
})
return(sum(summands))
}
out <- vstar
out
s
s=2
Qstar(s, 1, vstar)
Qstar(s, 2, vstar)
for(s in 2:4) {
vnext <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
vnext
vnext <- rep(0, 5)
for(s in 2:4) {
vnext <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
vnext
vnext <- rep(0, 5)
for(s in 2:4) {
vnext[s] <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
vnext
out <- rbind(out, vnext)
out
# Problem 1.
## Iteration t == 1
0.8 * 10 + 0.2 * (-5)
0.7 * 10 + 0.3 * (-5)
0.8 * (-5) + 0.2 * (50)
0.7 * (-5) + 0.3 * (50)
## Iteration t == 2
0.8 * 10 + 0.2 * (-5 - 5)
0.7 * 10 + 0.3 * (-5 - 5)
0.8 * (-5 + 7) + 0.2 * (-5 + 11.5)
0.7 * (-5 + 7) + 0.3 * (-5 + 11.5)
0.8 * (-5 - 5) + 0.2 * (50)
0.7 * (-5 - 5) + 0.3 * (50)
# Transition matrix.
t1 <- rbind(
c(1, 0, 0, 0, 0),
c(0.8, 0, 0.2, 0, 0),
c(0, 0.8, 0, 0.2, 0),
c(0, 0, 0.8, 0, 0.2),
c(0, 0, 0, 0, 1)
)
t2 <- rbind(
c(1, 0, 0, 0, 0),
c(0.7, 0, 0.3, 0, 0),
c(0, 0.7, 0, 0.3, 0),
c(0, 0, 0.7, 0, 0.3),
c(0, 0, 0, 0, 1)
)
# Reward matrix.
r <- c(10, -5, -5, -5, 50)
# Initialize v.
vstar <- rep(0, 5)
# Calculate Qstar
Qstar <- function(s, a, vstar) {
if (a == 1) {
trans <- t1[s, ]
} else {
trans <- t2[s, ]
}
summands <- sapply(seq_len(5), function(i) {
trans[i] * (r[i] + vstar[i])
})
return(sum(summands))
}
out <- vstar
for(t in 1:2){
vnext <- rep(0, 5)
for(s in 2:4) {
vnext[s] <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
out <- rbind(out, vnext)
vstar <- vnext
}
out
out <- vstar
for(t in 1:100){
vnext <- rep(0, 5)
for(s in 2:4) {
vnext[s] <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
out <- rbind(out, vnext)
vstar <- vnext
}
out
out <- vstar
for(t in 1:3){
vnext <- rep(0, 5)
for(s in 2:4) {
vnext[s] <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
out <- rbind(out, vnext)
vstar <- vnext
}
out
# Problem 1.
## Iteration t == 1
0.8 * 10 + 0.2 * (-5)
0.7 * 10 + 0.3 * (-5)
0.8 * (-5) + 0.2 * (50)
0.7 * (-5) + 0.3 * (50)
## Iteration t == 2
0.8 * 10 + 0.2 * (-5 - 5)
0.7 * 10 + 0.3 * (-5 - 5)
0.8 * (-5 + 7) + 0.2 * (-5 + 11.5)
0.7 * (-5 + 7) + 0.3 * (-5 + 11.5)
0.8 * (-5 - 5) + 0.2 * (50)
0.7 * (-5 - 5) + 0.3 * (50)
# Transition matrix.
t1 <- rbind(
c(1, 0, 0, 0, 0),
c(0.8, 0, 0.2, 0, 0),
c(0, 0.8, 0, 0.2, 0),
c(0, 0, 0.8, 0, 0.2),
c(0, 0, 0, 0, 1)
)
t2 <- rbind(
c(1, 0, 0, 0, 0),
c(0.7, 0, 0.3, 0, 0),
c(0, 0.7, 0, 0.3, 0),
c(0, 0, 0.7, 0, 0.3),
c(0, 0, 0, 0, 1)
)
# Reward matrix.
r <- c(10, -5, -5, -5, 50)
# Initialize v.
vstar <- rep(0, 5)
# Calculate Qstar
Qstar <- function(s, a, vstar) {
if (a == 1) {
trans <- t1[s, ]
} else {
trans <- t2[s, ]
}
summands <- sapply(seq_len(5), function(i) {
trans[i] * (r[i] + vstar[i])
})
return(sum(summands))
}
out <- vstar
for(t in 1:3){
vnext <- rep(0, 5)
for(s in 2:4) {
vnext[s] <- max(Qstar(s, 1, vstar), Qstar(s, 2, vstar))
}
out <- rbind(out, vnext)
vstar <- vnext
}
out
0.8 * 10 + 0.2 * (-5 + 3.35)
0.7 * 10 + 0.3 * (-5 + 3.35)
0.8 * (-5 + 6) + 0.2 * (-5 + 8)
0.7 * (-5 + 6) + 0.3 * (-5 + 8)
0.8 * (-5 + 3.35) + 0.2 * (50)
0.7 * (-5 + 3.35) + 0.3 * (50)
out
(12-6.82) / 6.82
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/CICs/CICs")
# devtools::create(path = 'CICs')
# Use cpp
# pkgbuild::compile_dll(force = TRUE)
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="CICs", reload = TRUE)
setwd("CICs/")
# Check package
# devtools::check()
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/CICs/CICs")
# devtools::create(path = 'CICs')
# Use cpp
# pkgbuild::compile_dll(force = TRUE)
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="CICs", reload = TRUE)
setwd("CICs/")
# Check package
# devtools::check()
remove.packages("CICs")
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/CICs/CICs")
# devtools::create(path = 'CICs')
# Use cpp
# pkgbuild::compile_dll(force = TRUE)
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="CICs", reload = TRUE)
setwd("CICs/")
# Check package
# devtools::check()
